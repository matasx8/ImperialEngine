#version 450

#extension GL_EXT_shader_16bit_storage: require
#extension GL_EXT_shader_8bit_storage: require
#extension GL_NV_mesh_shader: require
#extension GL_GOOGLE_include_directive: require
#extension GL_ARB_shader_draw_parameters: require
#extension GL_EXT_nonuniform_qualifier : require
#extension GL_KHR_shader_subgroup_ballot: require

#define MESH_PIPELINE
#include "DescriptorSet0.h"
#include "DescriptorSet1.h"

layout(local_size_x = 32, local_size_y = 1, local_size_z = 1) in;

out taskNV block
{
	uint meshletIndices[32];
	uint drawIdx;
};

bool coneCull(vec4 cone, vec3 apex, vec3 cam_pos)
{
	return dot(normalize(apex - cam_pos), cone.xyz) >= cone.w;
}

void main()
{
	drawIdx = drawDataIndices[gl_DrawIDARB];

	uint meshletBufferOffset = ms_DrawDst[gl_DrawIDARB].meshletBufferOffset;
	uint meshTaskCount = ms_DrawDst[gl_DrawIDARB].meshTaskCount;

	uint ti = gl_LocalInvocationID.x;
	uint mi = gl_GlobalInvocationID.x + meshletBufferOffset;

	mat4 model_matrix = drawData[drawIdx].Transform;
	
	vec4 decoded_cone = vec4(int(normalCone[meshlets[mi].normalConeOffset].cone[0]), int(normalCone[meshlets[mi].normalConeOffset].cone[1]), int(normalCone[meshlets[mi].normalConeOffset].cone[2]), int(normalCone[meshlets[mi].normalConeOffset].cone[3])) / 127.0;
	mat4 rotmat = globals.View * model_matrix;
	rotmat[3] = vec4(0,0,0,1);
	vec4 cone = vec4((rotmat * vec4(decoded_cone.xyz, 1)).xyz, decoded_cone.w);
	
	// Transform Cone Apex to view space
	vec3 apex_view_space = (globals.View * model_matrix * vec4(normalCone[meshlets[mi].normalConeOffset].apex, 1.0)).xyz;
	
	// Camera position in View space is at the origin
	vec3 cam_pos = vec3(0,0,0);
	
	bool notOutOfBounds = gl_GlobalInvocationID.x < meshTaskCount;

	bool visible = notOutOfBounds && !coneCull(cone, apex_view_space, cam_pos);

	uvec4 vote = subgroupBallot(visible);
	uint meshletCount = subgroupBallotBitCount(vote);

	if (ti == 0)
	{
		uint drawDataIndex = drawIdx;
		uint taskCount = min(meshletCount, meshTaskCount - gl_WorkGroupID.x * 32);

		gl_TaskCountNV = taskCount;
	}

	uint index = subgroupBallotExclusiveBitCount(vote);
	if(visible)
		meshletIndices[index] = mi;
}